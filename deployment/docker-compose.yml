version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-crop-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai-crop-advisor
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-crop-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: ai-crop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ai-crop-network

  # Python ML Service
  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: ai-crop-ml
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
    volumes:
      - ./ml_models:/app/models
    networks:
      - ai-crop-network
    depends_on:
      - redis

  # Node.js Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-crop-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ai-crop-advisor?authSource=admin
      - ML_SERVICE_URL=http://ml-service:8000
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ai-crop-network
    depends_on:
      - mongodb
      - ml-service
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-crop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl
    networks:
      - ai-crop-network
    depends_on:
      - backend

volumes:
  mongodb_data:
    driver: local

networks:
  ai-crop-network:
    driver: bridge
